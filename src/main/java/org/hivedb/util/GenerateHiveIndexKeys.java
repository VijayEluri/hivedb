package org.hivedb.util;

import java.sql.SQLException;
import java.util.Collection;
import java.util.Map;

import org.hivedb.HiveException;
import org.hivedb.meta.Hive;
import org.hivedb.meta.PartitionDimension;
import org.hivedb.meta.Resource;
import org.hivedb.meta.SecondaryIndex;
import org.hivedb.util.scenarioBuilder.Filter;
import org.hivedb.util.scenarioBuilder.Generate;
import org.hivedb.util.scenarioBuilder.Generator;
import org.hivedb.util.scenarioBuilder.HiveScenarioConfig;
import org.hivedb.util.scenarioBuilder.NumberIterator;
import org.hivedb.util.scenarioBuilder.Predicate;
import org.hivedb.util.scenarioBuilder.PrimaryIndexIdentifiable;
import org.hivedb.util.scenarioBuilder.ResourceIdentifiable;
import org.hivedb.util.scenarioBuilder.RingIteratorable;
import org.hivedb.util.scenarioBuilder.SecondaryIndexIdentifiable;
import org.hivedb.util.scenarioBuilder.Transform;
import org.hivedb.util.scenarioBuilder.Unary;

public class GenerateHiveIndexKeys {
	
	/**
	 *  Given a Hive and HiveScenarioConfig create and persist a collection of PrimaryIndexIdentifiable instances for eatch PrimaryIndexIdentifiable class.
	 *  The classes and number of instances are defined in the hiveScenarioConfig.
	 *  
	 *  This method is used createSecondaryIndexIdentifiableInstances(), so it's not necessary to call this directly if you are generating 
	 *  
	 * @param hive
	 * @param hiveScenarioConfig
	 * @return
	 */
	public Map<PrimaryIndexIdentifiable, Collection<PrimaryIndexIdentifiable>> 
		createPrimaryIndexInstances(final Hive hive, final HiveScenarioConfig hiveScenarioConfig)
	{	
		return Transform.toMap(
			new Transform.IdentityFunction<PrimaryIndexIdentifiable>(),
			new Unary<PrimaryIndexIdentifiable, Collection<PrimaryIndexIdentifiable>>() {
				public Collection<PrimaryIndexIdentifiable> f(final PrimaryIndexIdentifiable primaryIndexIdentifiablePrototype) {		
					return Generate.create(new Generator<PrimaryIndexIdentifiable>() { 
						public PrimaryIndexIdentifiable f() {
							try {
								final PrimaryIndexIdentifiable newPrimaryIndexIdentifiable = primaryIndexIdentifiablePrototype.construct();
								persistPrimaryIndexKey(hive, newPrimaryIndexIdentifiable);						
								return newPrimaryIndexIdentifiable;
							} catch (Exception e) { throw new RuntimeException(e); }
						}},
						new NumberIterator(hiveScenarioConfig.getInstanceCountPerPrimaryIndex()));
				}
			},
			hiveScenarioConfig.getPrimaryInstanceIdentifiables());
	}	
	
	protected void persistPrimaryIndexKey(final Hive hive, final PrimaryIndexIdentifiable newPrimaryIndexIdentifiable) throws HiveException, SQLException {
		hive.insertPrimaryIndexKey(hive.getPartitionDimension(newPrimaryIndexIdentifiable.getPartitionDimensionName()), newPrimaryIndexIdentifiable.getPrimaryIndexKey());
	}
	/**
	 *  Create a collection of ResourceIdentifiableInstances for each ResourceIdentifiable class. Each ResourceIdentifiableInstance refers to
	 *  one of the PrimaryIndexInstances generated by 
	 * @param hive
	 * @param hiveScenarioConfig
	 * @param primaryIndexInstanceMap
	 * @return
	 */
	public Map<PrimaryIndexIdentifiable, Map<ResourceIdentifiable, Collection<ResourceIdentifiable>>>
		createSecondaryIndexInstances(
			final Hive hive,
			final HiveScenarioConfig hiveScenarioConfig,
			final Map<PrimaryIndexIdentifiable, Collection<PrimaryIndexIdentifiable>> primaryIndexInstanceMap)
	{
		return Transform.toMap(
			new Transform.IdentityFunction<PrimaryIndexIdentifiable>(),
			makeMapperToResourceIdentifiableMap(hive, hiveScenarioConfig, primaryIndexInstanceMap),
			hiveScenarioConfig.getPrimaryInstanceIdentifiables());
	}
	
	private Unary<PrimaryIndexIdentifiable, Map<ResourceIdentifiable, Collection<ResourceIdentifiable>>>
		makeMapperToResourceIdentifiableMap(
				final Hive hive,
				final HiveScenarioConfig hiveScenarioConfig,
				final Map<PrimaryIndexIdentifiable, Collection<PrimaryIndexIdentifiable>> primaryIndexInstanceMap) {
		
		// Make a RingIterable that iterates over the primary instancees,
		// for countPerSecondaryIndex, but limit it it to the number of primaryInstances to prevent duplicate primary keys
		// when the secondaryInstance is the same as the primaryInstance
		
		return new Unary<PrimaryIndexIdentifiable, Map<ResourceIdentifiable, Collection<ResourceIdentifiable>>>() {				
			public Map<ResourceIdentifiable, Collection<ResourceIdentifiable>> 
				f(PrimaryIndexIdentifiable primaryIndexIdentifiablePrototype) {	
				
				Collection<PrimaryIndexIdentifiable> primaryIndexIdentifiables = primaryIndexInstanceMap.get(primaryIndexIdentifiablePrototype);
				String partitionDimensionName = primaryIndexIdentifiablePrototype.getPartitionDimensionName();
					
				return Transform.toMap(
					new Transform.IdentityFunction<ResourceIdentifiable>(),
					makeResourceToSecondaryIndexIdentifiableGrower(hive, hiveScenarioConfig, primaryIndexIdentifiables),
					// TODO need to filter here?
					filterByPartitionDimensionName(primaryIndexIdentifiablePrototype.getResourceIdentifiables(), primaryIndexIdentifiablePrototype, partitionDimensionName)
				);						
			}
			
			private Collection<ResourceIdentifiable> filterByPartitionDimensionName(
					final Collection<ResourceIdentifiable> resourceIdentifiabes,
					final PrimaryIndexIdentifiable primaryIndexIdentifiable,
					final String partitionDimensionName)
			{
				return Filter.grep(new Predicate<ResourceIdentifiable>() {
				public boolean f(ResourceIdentifiable resourceIdentifiableClass) {
					return primaryIndexIdentifiable.getPartitionDimensionName()
						.equals(partitionDimensionName);
				}}, resourceIdentifiabes);
			}
		};
	}
	
	private Unary<ResourceIdentifiable, Collection<ResourceIdentifiable>>
		makeResourceToSecondaryIndexIdentifiableGrower(
			final Hive hive,
			final HiveScenarioConfig hiveScenarioConfig,
			final Collection<PrimaryIndexIdentifiable> primaryIndexIdentifiables) {
			
		return new Unary<ResourceIdentifiable, Collection<ResourceIdentifiable>>() {
			public Collection<ResourceIdentifiable>
				f(final ResourceIdentifiable resourceIdentifiablePrototype) {	
				
				// We need to behave differently if our ResourceIdentifiable class equals its PrimaryIndexIdentifiable class.
				// If it does we have to limit the number of SecondaryIndexIdentifiable instances that we generate
				// to the number of PrimaryIndexIdentifiable instances that we have, since it's a 1-to-1 relationship.
				// Also, if it's not the sameClass then we want to construct the ResourceIdentifiable with a reference
				// to it's PrimaryIndexIdentifiable instance.
				final boolean sameClass = (resourceIdentifiablePrototype.equals(resourceIdentifiablePrototype.getPrimaryIndexIdentifiable().getClass()));
				final Iterable<PrimaryIndexIdentifiable> primaryPartitionIndexInstanceIterable = new RingIteratorable<PrimaryIndexIdentifiable>(
					primaryIndexIdentifiables,
					sameClass
						? Math.min(hiveScenarioConfig.getInstanceCountPerSecondaryIndex(), primaryIndexIdentifiables.size()) // limit it
						: hiveScenarioConfig.getInstanceCountPerSecondaryIndex()); 	// follow our configuration preference		
				
				return Transform.map(
					makeResourceIdentifiableGrower(hive, hiveScenarioConfig, resourceIdentifiablePrototype, sameClass),
					primaryPartitionIndexInstanceIterable);
		
		}};	
	}
		
	private Unary<PrimaryIndexIdentifiable, ResourceIdentifiable> makeResourceIdentifiableGrower(final Hive hive, final HiveScenarioConfig hiveScenarioConfig, final ResourceIdentifiable resourceIdentifiablePrototype, final boolean sameClass) {
		return new Unary<PrimaryIndexIdentifiable, ResourceIdentifiable>() { 
			public ResourceIdentifiable f(PrimaryIndexIdentifiable primaryIndexIdentifiable) {
				ResourceIdentifiable resourceIdentifiable = resourceIdentifiablePrototype.construct(primaryIndexIdentifiable);
				resourceIdentifiable = persistResourceInstance(hive, resourceIdentifiable);
				for (SecondaryIndexIdentifiable secondaryIndexIdentifiable : resourceIdentifiable.getSecondaryIndexIdentifiables()) {
					persist(hive, secondaryIndexIdentifiable);
				}
				return resourceIdentifiable;
		}

		private void persist(final Hive hive, SecondaryIndexIdentifiable secondaryIndexIdentifiable) {
			try {
				persistSecondaryIndexKey(hive, secondaryIndexIdentifiable);
			} catch (Exception e) {
				throw new RuntimeException(e);
			}
		}};
	}
	protected ResourceIdentifiable persistResourceInstance(Hive hive, ResourceIdentifiable resourceIdentifiable) {
		// The hive doesn't care about individual instances representing resources, so nothing needs to be done here.
		// You could override this to persist data to you data node for this ResourceIdentifiable instance.
		// The return value allows you to return an instance that has been given an id after saving
		return resourceIdentifiable;
	}
	
	protected void persistSecondaryIndexKey(final Hive hive, SecondaryIndexIdentifiable secondaryIndexIdentifiable) throws HiveException, SQLException {
		hive.insertSecondaryIndexKey(getSecondaryIndex(hive, secondaryIndexIdentifiable), secondaryIndexIdentifiable.getSecondaryIndexKey(), getPrimaryIndexKey(secondaryIndexIdentifiable));
	}
	private SecondaryIndex getSecondaryIndex(Hive hive, SecondaryIndexIdentifiable secondaryIndexIdentifable)
	{
		ResourceIdentifiable resourceIdentifiable = secondaryIndexIdentifable.getResourceIdentifiable();
		String resourceName = resourceIdentifiable.getResourceName();
		String partitionDimensionName = resourceIdentifiable.getPrimaryIndexIdentifiable().getPartitionDimensionName();
		try {
			return hive.getPartitionDimension(partitionDimensionName).getResource(resourceName).getSecondaryIndex(secondaryIndexIdentifable.getSecondaryIndexName());
		} catch (HiveException e) {
			throw new RuntimeException(e);
		}
	}
	private Object getPrimaryIndexKey(SecondaryIndexIdentifiable secondaryIndexIdentifiable)
	{
		return secondaryIndexIdentifiable.getResourceIdentifiable().getPrimaryIndexIdentifiable().getPrimaryIndexKey();
	}
}
