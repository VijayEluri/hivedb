/**
 * HiveDB is an Open Source (LGPL) system for creating large, high-transaction-volume
 * data storage systems.
 * 
 * @author Kevin Kelm (kkelm@fortress-consulting.com)
 */
package org.hivedb;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.util.Vector;

public class Statement implements java.sql.Statement {
	public void close() {
		closeResultSets();
		_conn.releaseStatement( this );
	} // close
	
	public void addBatch(String sql) throws SQLException {
		delegate.addBatch( sql );
	}

	public void cancel() throws SQLException {
		delegate.cancel();
	}

	public void clearBatch() throws SQLException {
		delegate.clearBatch();
	}

	public void clearWarnings() throws SQLException {
		delegate.clearWarnings();
	}

	public boolean execute(String sql) throws SQLException {
		return delegate.execute( sql );
	}

	public boolean execute(String sql, int autoGeneratedKeys)
			throws SQLException {
		return delegate.execute( sql, autoGeneratedKeys );
	}

	public boolean execute(String sql, int[] columnIndexes) throws SQLException {
		return delegate.execute( sql, columnIndexes );
	}

	public boolean execute(String sql, String[] columnNames)
			throws SQLException {
		return delegate.execute( sql, columnNames );
	}

	public int[] executeBatch() throws SQLException {
		return delegate.executeBatch();
	}

	public java.sql.ResultSet executeQuery(String sql) throws SQLException {
		if( _queryResultSet != null ) {
			try {
				_queryResultSet.close();
			} catch( Exception e ) {
				
			} // try-catch
		} // if

		java.sql.ResultSet rset = delegate.executeQuery( sql );
		org.hivedb.ResultSet jhrs = new org.hivedb.ResultSet( this, rset );
		_resultSets.add( jhrs );
		
		return jhrs;
	}

	public int executeUpdate(String sql) throws SQLException {
		return executeUpdate( sql );
	}

	public int executeUpdate(String sql, int autoGeneratedKeys)
			throws SQLException {
		return executeUpdate( sql, autoGeneratedKeys );
	}

	public int executeUpdate(String sql, int[] columnIndexes)
			throws SQLException {
		return executeUpdate( sql, columnIndexes );
	}

	public int executeUpdate(String sql, String[] columnNames)
			throws SQLException {
		return executeUpdate( sql, columnNames );
	}

	public Connection getConnection() throws SQLException {
		return _conn;
	}

	public int getFetchDirection() throws SQLException {
		return delegate.getFetchDirection();
	}

	public int getFetchSize() throws SQLException {
		return delegate.getFetchSize();
	}

	public java.sql.ResultSet getGeneratedKeys() throws SQLException {
		java.sql.ResultSet rset = delegate.getGeneratedKeys();
		org.hivedb.ResultSet jhrs = new org.hivedb.ResultSet( this, rset );
		_resultSets.add( jhrs );
		
		return jhrs;
	}

	public int getMaxFieldSize() throws SQLException {
		return delegate.getMaxFieldSize();
	}

	public int getMaxRows() throws SQLException {
		return delegate.getMaxRows();
	}

	public boolean getMoreResults() throws SQLException {
		return delegate.getMoreResults();
	}

	public boolean getMoreResults(int current) throws SQLException {
		return delegate.getMoreResults( current );
	}

	public int getQueryTimeout() throws SQLException {
		return delegate.getQueryTimeout();
	}

	public java.sql.ResultSet getResultSet() throws SQLException {
		return _queryResultSet;
	}

	public int getResultSetConcurrency() throws SQLException {
		return delegate.getResultSetConcurrency();
	}

	public int getResultSetHoldability() throws SQLException {
		return delegate.getResultSetHoldability();
	}

	public int getResultSetType() throws SQLException {
		return delegate.getResultSetType();
	}

	public int getUpdateCount() throws SQLException {
		return delegate.getUpdateCount();
	}

	public SQLWarning getWarnings() throws SQLException {
		return delegate.getWarnings();
	}

	public void setCursorName(String name) throws SQLException {
		delegate.setCursorName(name);
	}

	public void setEscapeProcessing(boolean enable) throws SQLException {
		delegate.setEscapeProcessing( enable );
	}

	public void setFetchDirection(int direction) throws SQLException {
		delegate.setFetchDirection(direction);
	}

	public void setFetchSize(int rows) throws SQLException {
		delegate.setFetchSize( rows );
	}

	public void setMaxFieldSize(int max) throws SQLException {
		delegate.setMaxFieldSize( max );
	}

	public void setMaxRows(int max) throws SQLException {
		delegate.setMaxRows( max );
	}

	public void setQueryTimeout(int seconds) throws SQLException {
		delegate.setQueryTimeout( seconds );
	}

	
	public static final int TYPE_STATEMENT = 0;
	public static final int TYPE_CALLABLE  = 1;
	public static final int TYPE_PREPARED  = 2;
	
	public int getStatementType() {
		return type;
	} // getStatementType
	
	public String getKey() {
		return key;
	} // getKey
	
	public void setKey( String key ) {
		this.key = key;
	} // setKey

	
	public void registerResultSet( java.sql.ResultSet rset ) {
		_resultSets.add( rset );
	} // registerResultSet
	
	public void closeResultSet( org.hivedb.ResultSet rset ) {
		_resultSets.remove( rset );
	} // closeResultSet
	
	protected void closeResultSets() {
		for( int i = 0; i < _resultSets.size(); i++ ) {
			ResultSet rset = (ResultSet)_resultSets.elementAt( i );
			try {
				rset.close();
			} catch( Exception e ) {
			} // try-catch
		} // for
		_resultSets.clear();
	} // closeResultSets

	protected org.hivedb.Connection _conn           = null;
	protected java.sql.Statement   delegate        = null;
	protected Vector<ResultSet>               _resultSets     = new Vector<ResultSet>();
	protected org.hivedb.ResultSet  _queryResultSet = null;
	protected int                  type            = TYPE_STATEMENT;
	protected String               key             = null;
}
