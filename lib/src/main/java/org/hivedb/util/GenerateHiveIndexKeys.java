package org.hivedb.util;

import java.util.Collection;
import java.util.Map;

import org.hivedb.Hive;
import org.hivedb.util.functional.Generate;
import org.hivedb.util.functional.Generator;
import org.hivedb.util.functional.NumberIterator;
import org.hivedb.util.functional.RingIteratorable;
import org.hivedb.util.functional.Transform;
import org.hivedb.util.functional.Unary;
import org.hivedb.util.scenarioBuilder.HiveScenarioConfig;
import org.hivedb.meta.PrimaryIndexIdentifiable;
import org.hivedb.meta.ResourceIdentifiable;
import org.hivedb.meta.SecondaryIndexIdentifiable;

public class GenerateHiveIndexKeys {
	
	private Persister persister = new PersisterImpl();
	private int primaryInstanceCount;
	private int resourceInstanceCount;
	public GenerateHiveIndexKeys(Persister persister, int primaryIndexInstanceCount, int resourceInstanceCount)
	{
		this.persister = persister;
		this.primaryInstanceCount = primaryIndexInstanceCount;
		this.resourceInstanceCount = resourceInstanceCount;
	}
	
	/**
	 *  Given a Hive and HiveScenarioConfig create and persist a collection of PrimaryIndexIdentifiable instances for eatch PrimaryIndexIdentifiable class.
	 *  The classes and number of instances are defined in the hiveScenarioConfig.
	 *  
	 *  This method is used createSecondaryIndexIdentifiableInstances(), so it's not necessary to call this directly if you are generating 
	 *  
	 * @param hive
	 * @param hiveScenarioConfig
	 * @return
	 */
	public  Collection<PrimaryIndexIdentifiable> 
		createPrimaryIndexInstances(final Hive hive, final HiveScenarioConfig hiveScenarioConfig)
	{	
		return Generate.create(new Generator<PrimaryIndexIdentifiable>() { 
			public PrimaryIndexIdentifiable f() {
				try {
					final PrimaryIndexIdentifiable newPrimaryIndexIdentifiable = hiveScenarioConfig.getPrimaryIndexIdentifiable().generate();
					persister.persistPrimaryIndexIdentifiable(hive, newPrimaryIndexIdentifiable);						
					return newPrimaryIndexIdentifiable;
				} catch (Exception e) { throw new RuntimeException(e); }
			}},
			new NumberIterator(primaryInstanceCount));
	}	
	

	/**
	 *  Create a collection of ResourceIdentifiableInstances for each ResourceIdentifiable class. Each ResourceIdentifiableInstance refers to
	 *  one of the PrimaryIndexInstances generated by 
	 * @param hive
	 * @param hiveScenarioConfig
	 * @param primaryIndexIdentifiables
	 * @return
	 */
	public Map<ResourceIdentifiable, Collection<ResourceIdentifiable>>
		createSecondaryIndexInstances(
			final Hive hive,
			final HiveScenarioConfig hiveScenarioConfig,
			final Collection<PrimaryIndexIdentifiable> primaryIndexIdentifiables)
	{
		return 	makeMapperToResourceIdentifiableMap(hive, hiveScenarioConfig, hiveScenarioConfig.getPrimaryIndexIdentifiable(), primaryIndexIdentifiables);
	}
	
	private Map<ResourceIdentifiable, Collection<ResourceIdentifiable>> makeMapperToResourceIdentifiableMap(
				final Hive hive,
				final HiveScenarioConfig hiveScenarioConfig,
				final PrimaryIndexIdentifiable primaryIndexIdentifiablePrototype,
				final Collection<PrimaryIndexIdentifiable> primaryIndexIdentifiables) {
		
		return Transform.toMap(
			new Transform.IdentityFunction<ResourceIdentifiable>(),
			resourceCreator(hive, hiveScenarioConfig, primaryIndexIdentifiables),
			primaryIndexIdentifiablePrototype.getResourceIdentifiables()
		);						
	}
	
	private Unary<ResourceIdentifiable, Collection<ResourceIdentifiable>>
		resourceCreator(
			final Hive hive,
			final HiveScenarioConfig hiveScenarioConfig,
			final Collection<PrimaryIndexIdentifiable> primaryIndexIdentifiables) {
			
		return new Unary<ResourceIdentifiable, Collection<ResourceIdentifiable>>() {
			@SuppressWarnings("unchecked")
			public Collection<ResourceIdentifiable>
				f(final ResourceIdentifiable resourceIdentifiablePrototype) {	
				
				// We need to behave differently if our ResourceIdentifiable class equals its PrimaryIndexIdentifiable class.
				// If it does we have to limit the number of SecondaryIndexIdentifiable instances that we generate
				// to the number of PrimaryIndexIdentifiable instances that we have, since it's a 1-to-1 relationship.
				// Also, if it's not the sameClass then we want to construct the ResourceIdentifiable with a reference
				// to it's PrimaryIndexIdentifiable instance.
				final boolean sameClass = (resourceIdentifiablePrototype.getClass().equals(resourceIdentifiablePrototype.getPrimaryIndexIdentifiable().getClass()));
				final Iterable<PrimaryIndexIdentifiable> primaryPartitionIndexInstanceIterable = new RingIteratorable<PrimaryIndexIdentifiable>(
					primaryIndexIdentifiables,
					sameClass
						? Math.min(resourceInstanceCount, primaryIndexIdentifiables.size()) // limit it
						: resourceInstanceCount); 	// follow our configuration preference		
				
				Collection<ResourceIdentifiable> resourceIdentifiables =  (Collection<ResourceIdentifiable>) (sameClass 
					? primaryIndexIdentifiables
					: Transform.map(
							makeResourceIdentifiableGrower(hive, hiveScenarioConfig, resourceIdentifiablePrototype),
							primaryPartitionIndexInstanceIterable));	
				
				// Persist all the secondary indexes here. This really should be called after creating
				// all secondary indexes for all primary idexes identifiables, but it's easier to do here
				for (ResourceIdentifiable resourceIdentifiable : resourceIdentifiables)
					for (SecondaryIndexIdentifiable secondaryIndexIdentifiable : resourceIdentifiable.getSecondaryIndexIdentifiables()) 
						persistSecondaryIndexIdentifiable(hive, secondaryIndexIdentifiable);
				
				return resourceIdentifiables;
		}};	
	}
		
	private void persistSecondaryIndexIdentifiable(final Hive hive, SecondaryIndexIdentifiable secondaryIndexIdentifiable) {
		try {
			persister.persistSecondaryIndexIdentifiableInstance(hive, secondaryIndexIdentifiable);
		} catch (Exception e) {
			throw new RuntimeException(e);
		}
	}
	private Unary<PrimaryIndexIdentifiable, ResourceIdentifiable> makeResourceIdentifiableGrower(final Hive hive, final HiveScenarioConfig hiveScenarioConfig, final ResourceIdentifiable resourceIdentifiablePrototype) {
		return new Unary<PrimaryIndexIdentifiable, ResourceIdentifiable>() { 
			public ResourceIdentifiable f(PrimaryIndexIdentifiable primaryIndexIdentifiable) {
				ResourceIdentifiable resourceIdentifiable = resourceIdentifiablePrototype.generate(primaryIndexIdentifiable);
				resourceIdentifiable = persister.persistResourceIdentifiableInstance(hive, resourceIdentifiable);
				for (SecondaryIndexIdentifiable secondaryIndexIdentifiable : resourceIdentifiable.getSecondaryIndexIdentifiables()) {
					persistSecondaryIndexIdentifiable(hive, secondaryIndexIdentifiable);
				}
				return resourceIdentifiable;
		}};
	}	
}
